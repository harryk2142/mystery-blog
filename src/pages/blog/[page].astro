---
import { type CollectionEntry, getCollection } from "astro:content";
import NavigationBar from "./../../components/navigation/NavigationBar.astro";
import { SITE_TITLE } from "./../../consts";
import Footer from "../../components/Footer.astro";
import Meta from "../../components/Meta.astro";
import "./../../styles/root.css";
import "./../../styles/global.css";
import BlogPostCard from "../../components/BlogPostCard.astro";
interface Page<T = CollectionEntry<"blog">> {
  /** result */
  data: T[];
  /** metadata */
  /** the count of the first item on the page, starting from 0 */
  start: number;
  /** the count of the last item on the page, starting from 0 */
  end: number;
  /** total number of results */
  total: number;
  /** the current page number, starting from 1 */
  currentPage: number;
  /** number of items per page (default: 25) */
  size: number;
  /** number of last page */
  lastPage: number;
  url: {
    /** url of the current page */
    current: string;
    /** url of the previous page (if there is one) */
    prev: string | undefined;
    /** url of the next page (if there is one) */
    next: string | undefined;
  };
}
const { page } = Astro.props;
type Props = {
  page: Page;
};

export async function getStaticPaths({ paginate }: any) {
  const posts = (await getCollection("blog"))
    .filter((e) => !e.data.draft)
    .sort((a, b) => b.data.pubDate.valueOf() - a.data.pubDate.valueOf());

  return paginate(posts, { pageSize: 6 });
}

const { data, currentPage, lastPage, url } = page;
const prefix =
  "/" +
  url.current
    .split("/")
    .filter((e) => e.length > 0)
    .slice(0, -1)
    .join("/") +
  "/";
const urlToFirst = prefix + 1;
const urlToLast = prefix + lastPage;

const title = SITE_TITLE + " - Seite " + currentPage;
const description = "Seite " + currentPage + " von " + lastPage;
const showFirst = currentPage > 2;
const showLast = currentPage + 2 <= lastPage;
---

<html lang="de">
  <head>
    <Meta title={title} description={description} />
  </head>
  <body data-pagefind-ignore>
    <NavigationBar isStartPage={false} />
    <main class="wrapper">
      <section class="container">
        <div class="flex center-x">
          <h1>
            Seite {currentPage} von {lastPage}
          </h1>
        </div>
        <div
          id="top-pagination-container"
          class="flex center-x pagination-container"
        >
          <div class="pagination">
            {
              showFirst ? (
                <a href={urlToFirst}>
                  <span class="ascii">&#60;&#60;</span>
                </a>
              ) : null
            }
            {showFirst ? <div class="dots">...</div> : null}
            {
              url.prev ? (
                <a href={url.prev}>
                  <span class="ascii">&#60;</span>
                </a>
              ) : null
            }
            {
              currentPage - 1 > 0 ? (
                <a href={url.prev}>{currentPage - 1}</a>
              ) : null
            }
            <a href={url.current} class="active">{currentPage}</a>
            {
              currentPage < lastPage ? (
                <a href={url.next}>{currentPage + 1}</a>
              ) : null
            }
            {
              url.next ? (
                <a href={url.next}>
                  <span class="ascii">&#62;</span>
                </a>
              ) : null
            }
            {showLast ? <div class="dots">...</div> : null}
            {
              showLast ? (
                <a href={urlToLast}>
                  <span class="ascii">&#62;&#62;</span>
                </a>
              ) : null
            }
          </div>
        </div>

        <div id="blogposts-group-container">
          <div class="blogposts-group">
            {
              data.map((data) => {
                return (
                  <div class="blogposts-group-item">
                    <BlogPostCard blogpost={data} classlist="h100" />
                  </div>
                );
              })
            }
          </div>
        </div>

        <div
          id="bottom-pagination-container"
          class="flex center-x pagination-container"
        >
          <div class="pagination">
            {
              showFirst ? (
                <a href={urlToFirst}>
                  <span class="ascii">&#60;&#60;</span>
                </a>
              ) : null
            }
            {showFirst ? <div class="dots">...</div> : null}
            {
              url.prev ? (
                <a href={url.prev}>
                  <span class="ascii">&#60;</span>
                </a>
              ) : null
            }
            {
              currentPage - 1 > 0 ? (
                <a href={url.prev}>{currentPage - 1}</a>
              ) : null
            }
            <a href={url.current} class="active">{currentPage}</a>
            {
              currentPage < lastPage ? (
                <a href={url.next}>{currentPage + 1}</a>
              ) : null
            }
            {
              url.next ? (
                <a href={url.next}>
                  <span class="ascii">&#62;</span>
                </a>
              ) : null
            }
            {showLast ? <div class="dots">...</div> : null}
            {
              showLast ? (
                <a href={urlToLast}>
                  <span class="ascii">&#62;&#62;</span>
                </a>
              ) : null
            }
          </div>
        </div>
      </section>
    </main>
    <style>
      #blogposts-group-container {
        container-name: blogposts-group-container;
        container-type: inline-size;
      }
      .blogposts-group {
        margin-top: 2rem;
      }
      .blogposts-group-item {
        margin: 0 1rem 3rem 1rem;
      }

      @container blogposts-group-container (width >= 650px) {
        .blogposts-group {
          display: grid;
          grid-template-columns: repeat(3, 33%);
          grid-auto-rows: 1fr;
        }
      }
      @container blogposts-group-container (width < 650px) and (width >= 500px) {
        .blogposts-group {
          display: grid;
          grid-template-columns: repeat(2, 50%);
          grid-auto-rows: 1fr;
        }
      }
      @container blogposts-group-container (width < 500px) {
        .blogposts-group {
        }
      }
      .pagination-container {
        margin-bottom: 1rem;
      }
      .pagination {
        margin-top: 1rem;
        display: flex;
        flex-direction: row;
        height: 64px;
      }
      .dots {
        font-size: 1.5rem;
      }
      .dots::before,
      .dots::after {
        content: "   ";
        white-space: pre;
      }

      .pagination a {
        font-size: 2rem;

        display: flex;
        align-items: center;
        justify-content: center;
        font-weight: bold;
        color: var(--accent);
        float: left;
        text-decoration: none;
        border-radius: 5px;
        border: 1px solid black;
        aspect-ratio: 1;
        .ascii {
          /* font-size: 40px; */
        }
      }
      .pagination a:hover {
        background-color: #d4d5d2;
        color: var(--accent);
      }

      .pagination a.active {
        color: var(--secondary-color);
        background-color: var(--accent);
      }
      #bottom-pagination-container {
        padding-bottom: 6rem;
      }
    </style>
    <Footer />
  </body>
</html>
