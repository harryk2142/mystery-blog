---
import CenteredTitle from "@components/CenteredTitle.astro";
import Pagination from "@components/Pagination.astro";
import Default from "@layouts/Default.astro";
import { type CollectionEntry, getCollection } from "astro:content";
import BlogPostCard from "../../components/BlogPostCard.astro";
import { SITE_TITLE } from "./../../consts";
import "./../../styles/style.css";
interface Page<T = CollectionEntry<"blog">> {
	/** result */
	data: T[];
	/** metadata */
	/** the count of the first item on the page, starting from 0 */
	start: number;
	/** the count of the last item on the page, starting from 0 */
	end: number;
	/** total number of results */
	total: number;
	/** the current page number, starting from 1 */
	currentPage: number;
	/** number of items per page (default: 25) */
	size: number;
	/** number of last page */
	lastPage: number;
	url: {
		/** url of the current page */
		current: string;
		/** url of the previous page (if there is one) */
		prev: string | undefined;
		/** url of the next page (if there is one) */
		next: string | undefined;
	};
}
const { page } = Astro.props;
type Props = {
	page: Page;
};

export async function getStaticPaths({ paginate }: any) {
	const posts = (await getCollection("blog"))
		.filter((e) => !e.data.draft)
		.sort((a, b) => b.data.pubDate.valueOf() - a.data.pubDate.valueOf());

	return paginate(posts, { pageSize: 6 });
}

const { data, currentPage, lastPage, url } = page;
const prefix =
	"/" +
	url.current
		.split("/")
		.filter((e) => e.length > 0)
		.slice(0, -1)
		.join("/") +
	"/";
const urlToFirst = prefix + 1;
const urlToLast = prefix + lastPage;

const title = SITE_TITLE + " - Seite " + currentPage;
const description = "Seite " + currentPage + " von " + lastPage;
const showFirst = currentPage > 2;
const showLast = currentPage + 2 <= lastPage;
const paginationProps = {
	currentPage,
	url,
	lastPage,
	showFirst,
	showLast,
	urlToFirst,
	urlToLast,
};
---

<Default title={title} description={description}>
	<section id="page-title-section" class="mt-1">
		<CenteredTitle id="" text={"Seite " + currentPage + " von " + lastPage} />
	</section>
	<section>
		<div id="top-pagination-container" class="flex center-x pagination-container">
			<Pagination {...paginationProps} />
		</div>

		<div id="blogposts-group-container">
			<div class="blogposts-group">
				{
					data.map((data) => {
						return (
							<div class="blogposts-group-item">
								<BlogPostCard blogpost={data} />
							</div>
						);
					})
				}
			</div>
		</div>
		<div id="bottom-pagination-container" class="flex center-x pagination-container">
			<Pagination {...paginationProps} />
		</div>
	</section>

	<style>
		#blogposts-group-container {
			container-name: blogposts-group-container;
			container-type: inline-size;
		}
		.blogposts-group {
			margin-top: 2rem;
		}
		.blogposts-group-item {
			margin: 0 1rem 3rem 1rem;
		}

		@container blogposts-group-container (width >= 800px) {
			.blogposts-group {
				display: grid;
				grid-template-columns: repeat(3, 33%);
				grid-auto-rows: 1fr;
			}
		}
		@container blogposts-group-container (width < 800px) and (width >= 600px) {
			.blogposts-group {
				display: grid;
				grid-template-columns: repeat(2, 50%);
				grid-auto-rows: 1fr;
			}
		}
		/* @container blogposts-group-container (width < 600px) {
			.blogposts-group {
			}
		} */
		#bottom-pagination-container {
			padding-bottom: 6rem;
		}
		.pagination-container {
			display: flex;
			flex-direction: row;
			justify-content: center;
			align-items: center;
		}
	</style>
</Default>
